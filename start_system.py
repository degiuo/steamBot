#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ Steam
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
"""

import argparse
import asyncio
import subprocess
import sys
import os
from pathlib import Path

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        "data", "logs", "backups", 
        "backups/logs", "backups/configs", "backups/data"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Path(".env").exists():
        if Path("config_example.env").exists():
            print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config_example.env –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ")
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)

def start_bot_system():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–æ–≤"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–æ–≤...")
    try:
        subprocess.run([sys.executable, "main.py"])
    except KeyboardInterrupt:
        print("\nüõë –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def start_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        subprocess.run([sys.executable, "api_server.py"])
    except KeyboardInterrupt:
        print("\nüõë API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def start_both():
    """–ó–∞–ø—É—Å–∫ –∏ –±–æ—Ç–æ–≤, –∏ API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    import threading
    
    def run_bots():
        subprocess.run([sys.executable, "main.py"])
    
    def run_api():
        subprocess.run([sys.executable, "api_server.py"])
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        bot_thread = threading.Thread(target=run_bots, daemon=True)
        api_thread = threading.Thread(target=run_api, daemon=True)
        
        bot_thread.start()
        api_thread.start()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("‚ö° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            if not bot_thread.is_alive() or not api_thread.is_alive():
                break
            import time
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nüõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def create_sample_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    from admin_panel import BotManager
    from config import Config
    
    bot_manager = BotManager()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
    print("\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞:")
    
    bot_config = {
        'proxy': input("–ü—Ä–æ–∫—Å–∏ (http://user:pass@host:port) –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: ") or None,
        'game_app_id': int(input("App ID –∏–≥—Ä—ã (730 –¥–ª—è CS:GO): ") or "730"),
        'bot_name': input("–ò–º—è –±–æ—Ç–∞: ") or "TestBot",
        'username': input("Steam –ª–æ–≥–∏–Ω: "),
        'password': input("Steam –ø–∞—Ä–æ–ª—å: "),
        'api_key': input("Steam API –∫–ª—é—á: ") or Config.STEAM_API_KEY,
        'ma_file': input("–ü—É—Ç—å –∫ .maFile: ")
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['username', 'password', 'api_key', 'ma_file']
    missing_fields = [field for field in required_fields if not bot_config[field]]
    
    if missing_fields:
        print(f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
        return
    
    success = bot_manager.create_bot(bot_config)
    
    if success:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞")

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    
    try:
        from admin_panel import BotManager
        bot_manager = BotManager()
        
        bots = bot_manager.get_bot_list()
        notifications = bot_manager.get_admin_notifications()
        
        print(f"ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {len(bots)}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len([b for b in bots if b['is_active']])}")
        print(f"‚è∏Ô∏è  –ù–∞ –ø–∞—É–∑–µ: {len([b for b in bots if not b['is_active']])}")
        print(f"‚ö†Ô∏è  –° –æ—à–∏–±–∫–∞–º–∏: {len([b for b in bots if b['error_count'] > 0])}")
        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
        
        if bots:
            print("\n–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:")
            for bot in bots:
                status = "üü¢" if bot['is_active'] else "üî¥"
                print(f"  {status} {bot['bot_name']} ({bot['bot_id']}) - –æ—à–∏–±–æ–∫: {bot['error_count']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ Steam")
    
    parser.add_argument("--mode", "-m", 
                       choices=["bots", "api", "both", "setup", "install", "create-bot", "status"],
                       default="both",
                       help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞")
    
    parser.add_argument("--setup", action="store_true",
                       help="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    print("üéÆ === –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ Steam ===\n")
    
    if args.setup or args.mode == "setup":
        setup_environment()
        return
    
    if args.mode == "install":
        install_dependencies()
        return
    
    if args.mode == "create-bot":
        create_sample_bot()
        return
    
    if args.mode == "status":
        show_status()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        import steampy
        import fastapi
        import schedule
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python start_system.py --mode install")
        return
    
    if args.mode == "bots":
        start_bot_system()
    elif args.mode == "api":
        start_api_server()
    elif args.mode == "both":
        start_both()

if __name__ == "__main__":
    main() 